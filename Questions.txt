
10. Write a JavaScript program which prints the elements of the following array. 
Note : Use nested for loops.
Sample array : var a = [[1, 2, 1, 24], [8, 11, 9, 4], [7, 0, 7, 27], [7, 4, 28, 14], [3, 10, 26, 7]];
Sample Output : 
"row 0" 
" 1" 
" 2" 
" 1"
" 24"
"row 1" 
------
------
--==@ SOLUTION @==--

11. Write a JavaScript program to find the sum of squares of a numeric vector. 
--==@ SOLUTION @==--

12. Write a JavaScript program to compute the sum and product of an array of integers. 
--==@ SOLUTION @==--

13. Write a JavaScript program to add items in an blank array and display the items. 
Sample Screen : 
add elements in an blank array
--==@ SOLUTION @==--

14. Write a JavaScript program to remove duplicate items from an array (ignore case sensitivity). 
--==@ SOLUTION @==--

15. We have the following arrays : 
color = ["Blue ", "Green", "Red", "Orange", "Violet", "Indigo", "Yellow "];
o = ["th","st","nd","rd"]
Write a JavaScript program to display the colors in the following way :
"1st choice is Blue ."
"2nd choice is Green."
"3rd choice is Red."
- - - - - - - - - - - - -
Note : Use ordinal numbers to tell their position.
--==@ SOLUTION @==--

16. Find the leap years in a given range of years. 
--==@ SOLUTION @==--

17. Write a JavaScript program to shuffle an array. 
--==@ SOLUTION @==--

18. Write a JavaScript program to perform a binary search. 
Note : A binary search or half-interval search algorithm finds the position of a specified input value within an array sorted by key value. 
Sample array : 
var items = [1, 2, 3, 4, 5, 7, 8, 9];
Expected Output : 
console.log(binary_Search(items, 1)); //0 
console.log(binary_Search(items, 5)); //4
--==@ SOLUTION @==--

19. There are two arrays with individual values, write a JavaScript program to compute the sum of each individual index value from the given arrays. 
Sample array : 
array1 = [1,0,2,3,4];
array2 = [3,5,6,7,8,13];
Expected Output : 
[4, 5, 8, 10, 12, 13] 
--==@ SOLUTION @==--

20. Write a JavaScript program to find duplicate values in a JavaScript array. 
--==@ SOLUTION @==--

21. Write a JavaScript program to flatten a nested (any depth) array. If you pass shallow, the array will only be flattened a single level. 
Sample Data :
console.log(flatten([1, [2], [3, [[4]]],[5,6]])); 
[1, 2, 3, 4, 5, 6]
console.log(flatten([1, [2], [3, [[4]]],[5,6]], true)); 
[1, 2, 3, [[4]], 5, 6]
--==@ SOLUTION @==--

22. Write a JavaScript program to compute the union of two arrays. 
Sample Data :
console.log(union([1, 2, 3], [100, 2, 1, 10]));
[1, 2, 3, 10, 100]
--==@ SOLUTION @==--

23. Write a JavaScript function to find the difference of two arrays. 
Test Data :
console.log(difference([1, 2, 3], [100, 2, 1, 10])); 
["3", "10", "100"]
console.log(difference([1, 2, 3, 4, 5], [1, [2], [3, [[4]]],[5,6]])); 
["6"]
console.log(difference([1, 2, 3], [100, 2, 1, 10]));
["3", "10", "100"] 
--==@ SOLUTION @==--

24. Write a JavaScript function to remove. 'null', '0', '""', 'false', 'undefined' and 'NaN' values from an array. 
Sample array : [NaN, 0, 15, false, -22, '',undefined, 47, null]
Expected result : [15, -22, 47]
--==@ SOLUTION @==--

25. Write a JavaScript function to sort the following array of objects by title value. 
Sample object :

var library = [ 
   { author: 'Bill Gates', title: 'The Road Ahead', libraryID: 1254},
   { author: 'Steve Jobs', title: 'Walter Isaacson', libraryID: 4264},
   { author: 'Suzanne Collins', title: 'Mockingjay: The Final Book of The Hunger Games', libraryID: 3245}
   ];
Expected result :

[[object Object] {
  author: "Suzanne Collins",
  libraryID: 3245,
  title:"Mockingjay:The Final Book of The Hunger Games"
}, [object Object] {
  author: "Bill Gates",
  libraryID: 1254,
  title: "The Road Ahead"
}, [object Object] {
  author: "Steve Jobs",
  libraryID: 4264,
  title: "Walter Isaacson"
}]
--==@ SOLUTION @==--
26. Write a JavaScript program to find a pair of elements (indices of the two numbers) from an given array whose sum equals a specific target number. 

Input: numbers= [10,20,10,40,50,60,70], target=50
Output: 3, 4

--==@ SOLUTION @==--

27. Write a JavaScript function to retrieve the value of a given property from all elements in an array. 
Sample array : [NaN, 0, 15, false, -22, '',undefined, 47, null]
Expected result : [15, -22, 47]
--==@ SOLUTION @==--

28. Write a JavaScript function to find the longest common starting substring in a set of strings. 

Sample array : console.log(longest_common_starting_substring(['go', 'google']));
Expected result : "go"

--==@ SOLUTION @==--

29. Write a JavaScript function to fill an array with values (numeric, string with one character) on supplied bounds. 

Test Data : 
console.log(num_string_range('a', "z", 2));
["a", "c", "e", "g", "i", "k", "m", "o", "q", "s", "u", "w", "y"]

--==@ SOLUTION @==--
30. Write a JavaScript function to merge two arrays and removes all duplicates elements. 

Test data :
var array1 = [1, 2, 3]; 
var array2 = [2, 30, 1]; 
console.log(merge_array(array1, array2));
[3, 2, 30, 1]

--==@ SOLUTION @==--

31. Write a JavaScript function to remove a specific element from an array. 

Test data :
console.log(remove_array_element([2, 5, 9, 6], 5));
[2, 9, 6]
--==@ SOLUTION @==--

32. Write a JavaScript function to find an array contains a specific element. 

Test data :
console.log(remove_array_element([2, 5, 9, 6], 5));
[2, 9, 6]
--==@ SOLUTION @==--

33. Write a JavaScript script to empty an array keeping the original. 

--==@ SOLUTION @==--.

34. Write a JavaScript function to get nth largest element from an unsorted array. 

Test Data :
console.log(nthlargest([ 43, 56, 23, 89, 88, 90, 99, 652], 4));
89

--==@ SOLUTION @==--

35. Write a JavaScript function to get a random item from an array. 

--==@ SOLUTION @==--

36. Write a JavaScript function to create a specified number of elements with pre-filled numeric value array. 

Test Data :
console.log(array_filled(6, 0)); 
[0, 0, 0, 0, 0, 0]
console.log(array_filled(4, 11));
[11, 11, 11, 11]

--==@ SOLUTION @==--

37. Write a JavaScript function to create a specified number of elements with pre-filled string value array. 

Test Data :
console.log(array_filled(3, 'default value')); 
["default value", "default value", "default value"]
console.log(array_filled(4, 'password'));
["password", "password", "password", "password"]
--==@ SOLUTION @==--

38. Write a JavaScript function to move an array element from one position to another. 

Test Data :
console.log(move([10, 20, 30, 40, 50], 0, 2));
[20, 30, 10, 40, 50]
console.log(move([10, 20, 30, 40, 50], -1, -2));
[10, 20, 30, 50, 40]
--==@ SOLUTION @==--

39. Write a JavaScript function to filter false, null, 0 and blank values from an array. 

Test Data :
console.log(filter_array_values([58, '', 'abcd', true, null, false, 0]));
[58, "abcd", true]
--==@ SOLUTION @==--

40. Write a JavaScript function to generate an array of specified length, filled with integer numbers, increase by one from starting position. 

Test Data :
console.log(array_range(1, 4)); 
[1, 2, 3, 4]
console.log(array_range(-6, 4));
[-6, -5, -4, -3]
--==@ SOLUTION @==--

41. Write a JavaScript function to generate an array between two integers of 1 step length. 

Test Data :
console.log(rangeBetwee(4, 7)); 
[4, 5, 6, 7]
console.log(rangeBetwee(-4, 7));
[-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]
--==@ SOLUTION @==--

42. Write a JavaScript function to find the unique elements from two arrays. 

Test Data :
console.log(difference([1, 2, 3], [100, 2, 1, 10]));
["1", "2", "3", "10", "100"]
console.log(difference([1, 2, 3, 4, 5], [1, [2], [3, [[4]]],[5,6]])); 
["1", "2", "3", "4", "5", "6"]
console.log(difference([1, 2, 3], [100, 2, 1, 10])); 
["1", "2", "3", "10", "100"]
--==@ SOLUTION @==--